// Mocks generated by Mockito 5.4.2 from annotations
// in helixworlds_snatcher_sdk/test/features/scan/scan_screen_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:app_common_modules/core/failure.dart' as _i7;
import 'package:app_common_modules/core/success.dart' as _i9;
import 'package:dartz/dartz.dart' as _i2;
import 'package:google_mlkit_image_labeling/google_mlkit_image_labeling.dart'
    as _i4;
import 'package:helixworlds_snatcher_sdk/features/log/data/log_local_datasource.dart'
    as _i8;
import 'package:helixworlds_snatcher_sdk/features/log/data/model/log_model.dart'
    as _i10;
import 'package:helixworlds_snatcher_sdk/features/scan/data/model/scan_model.dart'
    as _i13;
import 'package:helixworlds_snatcher_sdk/features/scan/data/scan_repository.dart'
    as _i11;
import 'package:helixworlds_snatcher_sdk/features/user_details/user_details_repository.dart'
    as _i5;
import 'package:helixworlds_snatcher_sdk/models/object_detected_model.dart'
    as _i12;
import 'package:helixworlds_snatcher_sdk/utils/helper_util.dart' as _i15;
import 'package:image_picker/image_picker.dart' as _i14;
import 'package:image_picker_platform_interface/image_picker_platform_interface.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLostData_1 extends _i1.SmartFake implements _i3.LostData {
  _FakeLostData_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLostDataResponse_2 extends _i1.SmartFake
    implements _i3.LostDataResponse {
  _FakeLostDataResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInputImage_3 extends _i1.SmartFake implements _i4.InputImage {
  _FakeInputImage_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IUserDetailsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIUserDetailsRepository extends _i1.Mock
    implements _i5.IUserDetailsRepository {
  @override
  _i6.Future<_i2.Either<_i7.Failure, String>> getUserID() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserID,
          [],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, String>>.value(
            _FakeEither_0<_i7.Failure, String>(
          this,
          Invocation.method(
            #getUserID,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Either<_i7.Failure, String>>.value(
                _FakeEither_0<_i7.Failure, String>(
          this,
          Invocation.method(
            #getUserID,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, String>>);
}

/// A class which mocks [ILogLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockILogLocalDatasource extends _i1.Mock
    implements _i8.ILogLocalDatasource {
  @override
  _i6.Future<_i2.Either<_i7.Failure, _i9.Success>> cacheLogs(
          List<_i10.MyLogModel>? logs) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheLogs,
          [logs],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i9.Success>>.value(
            _FakeEither_0<_i7.Failure, _i9.Success>(
          this,
          Invocation.method(
            #cacheLogs,
            [logs],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Either<_i7.Failure, _i9.Success>>.value(
                _FakeEither_0<_i7.Failure, _i9.Success>(
          this,
          Invocation.method(
            #cacheLogs,
            [logs],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i9.Success>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i10.MyLogModel>>> getLogs() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLogs,
          [],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, List<_i10.MyLogModel>>>.value(
                _FakeEither_0<_i7.Failure, List<_i10.MyLogModel>>(
          this,
          Invocation.method(
            #getLogs,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Either<_i7.Failure, List<_i10.MyLogModel>>>.value(
                _FakeEither_0<_i7.Failure, List<_i10.MyLogModel>>(
          this,
          Invocation.method(
            #getLogs,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i10.MyLogModel>>>);
}

/// A class which mocks [IScanRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIScanRepository extends _i1.Mock implements _i11.IScanRepository {
  @override
  _i6.Future<_i2.Either<_i7.Failure, _i12.ObjectDetectedModel>> processImage(
          _i4.InputImage? image) =>
      (super.noSuchMethod(
        Invocation.method(
          #processImage,
          [image],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, _i12.ObjectDetectedModel>>.value(
                _FakeEither_0<_i7.Failure, _i12.ObjectDetectedModel>(
          this,
          Invocation.method(
            #processImage,
            [image],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Either<_i7.Failure, _i12.ObjectDetectedModel>>.value(
                _FakeEither_0<_i7.Failure, _i12.ObjectDetectedModel>(
          this,
          Invocation.method(
            #processImage,
            [image],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i12.ObjectDetectedModel>>);

  @override
  _i6.Future<
      _i2.Either<_i7.Failure, _i13.InventoryItemModel>> getInventoryItemByID(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInventoryItemByID,
          [id],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, _i13.InventoryItemModel>>.value(
                _FakeEither_0<_i7.Failure, _i13.InventoryItemModel>(
          this,
          Invocation.method(
            #getInventoryItemByID,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Either<_i7.Failure, _i13.InventoryItemModel>>.value(
                _FakeEither_0<_i7.Failure, _i13.InventoryItemModel>(
          this,
          Invocation.method(
            #getInventoryItemByID,
            [id],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i13.InventoryItemModel>>);
}

/// A class which mocks [ImagePicker].
///
/// See the documentation for Mockito's code generation for more information.
class MockImagePicker extends _i1.Mock implements _i14.ImagePicker {
  @override
  _i6.Future<_i3.PickedFile?> getImage({
    required _i3.ImageSource? source,
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    _i3.CameraDevice? preferredCameraDevice = _i3.CameraDevice.rear,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getImage,
          [],
          {
            #source: source,
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #preferredCameraDevice: preferredCameraDevice,
          },
        ),
        returnValue: _i6.Future<_i3.PickedFile?>.value(),
        returnValueForMissingStub: _i6.Future<_i3.PickedFile?>.value(),
      ) as _i6.Future<_i3.PickedFile?>);

  @override
  _i6.Future<List<_i3.PickedFile>?> getMultiImage({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMultiImage,
          [],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
          },
        ),
        returnValue: _i6.Future<List<_i3.PickedFile>?>.value(),
        returnValueForMissingStub: _i6.Future<List<_i3.PickedFile>?>.value(),
      ) as _i6.Future<List<_i3.PickedFile>?>);

  @override
  _i6.Future<_i3.PickedFile?> getVideo({
    required _i3.ImageSource? source,
    _i3.CameraDevice? preferredCameraDevice = _i3.CameraDevice.rear,
    Duration? maxDuration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVideo,
          [],
          {
            #source: source,
            #preferredCameraDevice: preferredCameraDevice,
            #maxDuration: maxDuration,
          },
        ),
        returnValue: _i6.Future<_i3.PickedFile?>.value(),
        returnValueForMissingStub: _i6.Future<_i3.PickedFile?>.value(),
      ) as _i6.Future<_i3.PickedFile?>);

  @override
  _i6.Future<_i3.LostData> getLostData() => (super.noSuchMethod(
        Invocation.method(
          #getLostData,
          [],
        ),
        returnValue: _i6.Future<_i3.LostData>.value(_FakeLostData_1(
          this,
          Invocation.method(
            #getLostData,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.LostData>.value(_FakeLostData_1(
          this,
          Invocation.method(
            #getLostData,
            [],
          ),
        )),
      ) as _i6.Future<_i3.LostData>);

  @override
  _i6.Future<_i3.XFile?> pickImage({
    required _i3.ImageSource? source,
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    _i3.CameraDevice? preferredCameraDevice = _i3.CameraDevice.rear,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickImage,
          [],
          {
            #source: source,
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #preferredCameraDevice: preferredCameraDevice,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i6.Future<_i3.XFile?>.value(),
        returnValueForMissingStub: _i6.Future<_i3.XFile?>.value(),
      ) as _i6.Future<_i3.XFile?>);

  @override
  _i6.Future<List<_i3.XFile>> pickMultiImage({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickMultiImage,
          [],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i6.Future<List<_i3.XFile>>.value(<_i3.XFile>[]),
        returnValueForMissingStub:
            _i6.Future<List<_i3.XFile>>.value(<_i3.XFile>[]),
      ) as _i6.Future<List<_i3.XFile>>);

  @override
  _i6.Future<_i3.XFile?> pickMedia({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickMedia,
          [],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i6.Future<_i3.XFile?>.value(),
        returnValueForMissingStub: _i6.Future<_i3.XFile?>.value(),
      ) as _i6.Future<_i3.XFile?>);

  @override
  _i6.Future<List<_i3.XFile>> pickMultipleMedia({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickMultipleMedia,
          [],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i6.Future<List<_i3.XFile>>.value(<_i3.XFile>[]),
        returnValueForMissingStub:
            _i6.Future<List<_i3.XFile>>.value(<_i3.XFile>[]),
      ) as _i6.Future<List<_i3.XFile>>);

  @override
  _i6.Future<_i3.XFile?> pickVideo({
    required _i3.ImageSource? source,
    _i3.CameraDevice? preferredCameraDevice = _i3.CameraDevice.rear,
    Duration? maxDuration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickVideo,
          [],
          {
            #source: source,
            #preferredCameraDevice: preferredCameraDevice,
            #maxDuration: maxDuration,
          },
        ),
        returnValue: _i6.Future<_i3.XFile?>.value(),
        returnValueForMissingStub: _i6.Future<_i3.XFile?>.value(),
      ) as _i6.Future<_i3.XFile?>);

  @override
  _i6.Future<_i3.LostDataResponse> retrieveLostData() => (super.noSuchMethod(
        Invocation.method(
          #retrieveLostData,
          [],
        ),
        returnValue:
            _i6.Future<_i3.LostDataResponse>.value(_FakeLostDataResponse_2(
          this,
          Invocation.method(
            #retrieveLostData,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.LostDataResponse>.value(_FakeLostDataResponse_2(
          this,
          Invocation.method(
            #retrieveLostData,
            [],
          ),
        )),
      ) as _i6.Future<_i3.LostDataResponse>);

  @override
  bool supportsImageSource(_i3.ImageSource? source) => (super.noSuchMethod(
        Invocation.method(
          #supportsImageSource,
          [source],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [InputImage].
///
/// See the documentation for Mockito's code generation for more information.
class MockInputImage extends _i1.Mock implements _i4.InputImage {
  @override
  _i4.InputImageType get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _i4.InputImageType.file,
        returnValueForMissingStub: _i4.InputImageType.file,
      ) as _i4.InputImageType);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [HelperUtil].
///
/// See the documentation for Mockito's code generation for more information.
class MockHelperUtil extends _i1.Mock implements _i15.HelperUtil {
  @override
  _i4.InputImage getInputImageFile(_i3.XFile? photo) => (super.noSuchMethod(
        Invocation.method(
          #getInputImageFile,
          [photo],
        ),
        returnValue: _FakeInputImage_3(
          this,
          Invocation.method(
            #getInputImageFile,
            [photo],
          ),
        ),
        returnValueForMissingStub: _FakeInputImage_3(
          this,
          Invocation.method(
            #getInputImageFile,
            [photo],
          ),
        ),
      ) as _i4.InputImage);
}
