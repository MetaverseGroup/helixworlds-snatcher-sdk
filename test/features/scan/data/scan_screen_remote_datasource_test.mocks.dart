// Mocks generated by Mockito 5.4.2 from annotations
// in helixworlds_snatcher_sdk/test/features/scan/data/scan_screen_remote_datasource_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:app_common_modules/core/failure.dart' as _i5;
import 'package:app_common_modules/core/success.dart' as _i8;
import 'package:dartz/dartz.dart' as _i2;
import 'package:helixworlds_snatcher_sdk/features/scan/data/model/scan_model.dart'
    as _i6;
import 'package:helixworlds_snatcher_sdk/features/scan/data/scan_local_datasource.dart'
    as _i7;
import 'package:helixworlds_snatcher_sdk/features/scan/data/scan_remote_datasource.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IScanRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIScanRemoteDatasource extends _i1.Mock
    implements _i3.IScanRemoteDatasource {
  @override
  _i4.Future<
      _i2.Either<_i5.Failure, _i6.InventoryItemModel>> getInventoryItemByID(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInventoryItemByID,
          [id],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.InventoryItemModel>>.value(
                _FakeEither_0<_i5.Failure, _i6.InventoryItemModel>(
          this,
          Invocation.method(
            #getInventoryItemByID,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.InventoryItemModel>>.value(
                _FakeEither_0<_i5.Failure, _i6.InventoryItemModel>(
          this,
          Invocation.method(
            #getInventoryItemByID,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.InventoryItemModel>>);
}

/// A class which mocks [IScanLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIScanLocalDatasource extends _i1.Mock
    implements _i7.IScanLocalDatasource {
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i8.Success>> cacheInventoryItem(
          _i6.InventoryItemModel? items) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheInventoryItem,
          [items],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i8.Success>>.value(
            _FakeEither_0<_i5.Failure, _i8.Success>(
          this,
          Invocation.method(
            #cacheInventoryItem,
            [items],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i8.Success>>.value(
                _FakeEither_0<_i5.Failure, _i8.Success>(
          this,
          Invocation.method(
            #cacheInventoryItem,
            [items],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i8.Success>>);

  @override
  _i4.Future<
      _i2.Either<_i5.Failure, _i6.InventoryItemModel>> fetchInventoryItemByID(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchInventoryItemByID,
          [id],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.InventoryItemModel>>.value(
                _FakeEither_0<_i5.Failure, _i6.InventoryItemModel>(
          this,
          Invocation.method(
            #fetchInventoryItemByID,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.InventoryItemModel>>.value(
                _FakeEither_0<_i5.Failure, _i6.InventoryItemModel>(
          this,
          Invocation.method(
            #fetchInventoryItemByID,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.InventoryItemModel>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.InventoryItemModel>>>
      getInventoryItems() => (super.noSuchMethod(
            Invocation.method(
              #getInventoryItems,
              [],
            ),
            returnValue: _i4.Future<
                    _i2
                    .Either<_i5.Failure, List<_i6.InventoryItemModel>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.InventoryItemModel>>(
              this,
              Invocation.method(
                #getInventoryItems,
                [],
              ),
            )),
            returnValueForMissingStub: _i4.Future<
                    _i2
                    .Either<_i5.Failure, List<_i6.InventoryItemModel>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.InventoryItemModel>>(
              this,
              Invocation.method(
                #getInventoryItems,
                [],
              ),
            )),
          ) as _i4
              .Future<_i2.Either<_i5.Failure, List<_i6.InventoryItemModel>>>);
}
